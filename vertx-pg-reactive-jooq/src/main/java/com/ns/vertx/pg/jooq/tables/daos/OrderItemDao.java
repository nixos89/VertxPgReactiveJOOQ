/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.daos;


import com.ns.vertx.pg.jooq.tables.OrderItem;
import com.ns.vertx.pg.jooq.tables.records.OrderItemRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import javax.annotation.Generated;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderItemDao extends AbstractReactiveVertxDAO<OrderItemRecord, com.ns.vertx.pg.jooq.tables.pojos.OrderItem, Long, Future<List<com.ns.vertx.pg.jooq.tables.pojos.OrderItem>>, Future<com.ns.vertx.pg.jooq.tables.pojos.OrderItem>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<OrderItemRecord,com.ns.vertx.pg.jooq.tables.pojos.OrderItem,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public OrderItemDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(OrderItem.ORDER_ITEM, com.ns.vertx.pg.jooq.tables.pojos.OrderItem.class, new ReactiveClassicQueryExecutor<OrderItemRecord,com.ns.vertx.pg.jooq.tables.pojos.OrderItem,Long>(configuration,delegate,com.ns.vertx.pg.jooq.tables.mappers.RowMappers.getOrderItemMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.ns.vertx.pg.jooq.tables.pojos.OrderItem object) {
        return object.getOrderItemId();
    }

    /**
     * Find records that have <code>amount IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.OrderItem>> findManyByAmount(Collection<Integer> values) {
        return findManyByCondition(OrderItem.ORDER_ITEM.AMOUNT.in(values));
    }

    /**
     * Find records that have <code>book_id IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.OrderItem>> findManyByBookId(Collection<Long> values) {
        return findManyByCondition(OrderItem.ORDER_ITEM.BOOK_ID.in(values));
    }

    /**
     * Find records that have <code>order_id IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.OrderItem>> findManyByOrderId(Collection<Long> values) {
        return findManyByCondition(OrderItem.ORDER_ITEM.ORDER_ID.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<OrderItemRecord,com.ns.vertx.pg.jooq.tables.pojos.OrderItem,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<OrderItemRecord,com.ns.vertx.pg.jooq.tables.pojos.OrderItem,Long>) super.queryExecutor();
    }
}
