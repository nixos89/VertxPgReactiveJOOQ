/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.records;


import com.ns.vertx.pg.jooq.tables.CategoryBook;
import com.ns.vertx.pg.jooq.tables.interfaces.ICategoryBook;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryBookRecord extends UpdatableRecordImpl<CategoryBookRecord> implements VertxPojo, Record2<Long, Long>, ICategoryBook {

    private static final long serialVersionUID = -1389302546;

    /**
     * Setter for <code>public.category_book.category_id</code>.
     */
    @Override
    public CategoryBookRecord setCategoryId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.category_book.category_id</code>.
     */
    @Override
    public Long getCategoryId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.category_book.book_id</code>.
     */
    @Override
    public CategoryBookRecord setBookId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.category_book.book_id</code>.
     */
    @Override
    public Long getBookId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CategoryBook.CATEGORY_BOOK.CATEGORY_ID;
    }

    @Override
    public Field<Long> field2() {
        return CategoryBook.CATEGORY_BOOK.BOOK_ID;
    }

    @Override
    public Long component1() {
        return getCategoryId();
    }

    @Override
    public Long component2() {
        return getBookId();
    }

    @Override
    public Long value1() {
        return getCategoryId();
    }

    @Override
    public Long value2() {
        return getBookId();
    }

    @Override
    public CategoryBookRecord value1(Long value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public CategoryBookRecord value2(Long value) {
        setBookId(value);
        return this;
    }

    @Override
    public CategoryBookRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICategoryBook from) {
        setCategoryId(from.getCategoryId());
        setBookId(from.getBookId());
    }

    @Override
    public <E extends ICategoryBook> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoryBookRecord
     */
    public CategoryBookRecord() {
        super(CategoryBook.CATEGORY_BOOK);
    }

    /**
     * Create a detached, initialised CategoryBookRecord
     */
    public CategoryBookRecord(Long categoryId, Long bookId) {
        super(CategoryBook.CATEGORY_BOOK);

        set(0, categoryId);
        set(1, bookId);
    }

    public CategoryBookRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
