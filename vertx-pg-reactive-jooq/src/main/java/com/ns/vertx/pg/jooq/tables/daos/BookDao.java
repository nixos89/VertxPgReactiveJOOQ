/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.daos;


import com.ns.vertx.pg.jooq.tables.Book;
import com.ns.vertx.pg.jooq.tables.records.BookRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookDao extends AbstractReactiveVertxDAO<BookRecord, com.ns.vertx.pg.jooq.tables.pojos.Book, Long, Future<List<com.ns.vertx.pg.jooq.tables.pojos.Book>>, Future<com.ns.vertx.pg.jooq.tables.pojos.Book>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<BookRecord,com.ns.vertx.pg.jooq.tables.pojos.Book,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public BookDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Book.BOOK, com.ns.vertx.pg.jooq.tables.pojos.Book.class, new ReactiveClassicQueryExecutor<BookRecord,com.ns.vertx.pg.jooq.tables.pojos.Book,Long>(configuration,delegate,com.ns.vertx.pg.jooq.tables.mappers.RowMappers.getBookMapper()));
    }

    @Override
    protected Long getId(com.ns.vertx.pg.jooq.tables.pojos.Book object) {
        return object.getBookId();
    }

    /**
     * Find records that have <code>title IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Book>> findManyByTitle(Collection<String> values) {
        return findManyByCondition(Book.BOOK.TITLE.in(values));
    }

    /**
     * Find records that have <code>price IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Book>> findManyByPrice(Collection<Double> values) {
        return findManyByCondition(Book.BOOK.PRICE.in(values));
    }

    /**
     * Find records that have <code>amount IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Book>> findManyByAmount(Collection<Integer> values) {
        return findManyByCondition(Book.BOOK.AMOUNT.in(values));
    }

    /**
     * Find records that have <code>is_deleted IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Book>> findManyByIsDeleted(Collection<Boolean> values) {
        return findManyByCondition(Book.BOOK.IS_DELETED.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<BookRecord,com.ns.vertx.pg.jooq.tables.pojos.Book,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<BookRecord,com.ns.vertx.pg.jooq.tables.pojos.Book,Long>) super.queryExecutor();
    }
}
