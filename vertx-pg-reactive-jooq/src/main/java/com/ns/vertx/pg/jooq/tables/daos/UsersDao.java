/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.daos;


import com.ns.vertx.pg.jooq.tables.Users;
import com.ns.vertx.pg.jooq.tables.records.UsersRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import javax.annotation.Generated;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends AbstractReactiveVertxDAO<UsersRecord, com.ns.vertx.pg.jooq.tables.pojos.Users, Long, Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>>, Future<com.ns.vertx.pg.jooq.tables.pojos.Users>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<UsersRecord,com.ns.vertx.pg.jooq.tables.pojos.Users,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public UsersDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Users.USERS, com.ns.vertx.pg.jooq.tables.pojos.Users.class, new ReactiveClassicQueryExecutor<UsersRecord,com.ns.vertx.pg.jooq.tables.pojos.Users,Long>(configuration,delegate,com.ns.vertx.pg.jooq.tables.mappers.RowMappers.getUsersMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.ns.vertx.pg.jooq.tables.pojos.Users object) {
        return object.getUserId();
    }

    /**
     * Find records that have <code>first_name IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByFirstName(Collection<String> values) {
        return findManyByCondition(Users.USERS.FIRST_NAME.in(values));
    }

    /**
     * Find records that have <code>last_name IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByLastName(Collection<String> values) {
        return findManyByCondition(Users.USERS.LAST_NAME.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByEmail(Collection<String> values) {
        return findManyByCondition(Users.USERS.EMAIL.in(values));
    }

    /**
     * Find records that have <code>username IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByUsername(Collection<String> values) {
        return findManyByCondition(Users.USERS.USERNAME.in(values));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByPassword(Collection<String> values) {
        return findManyByCondition(Users.USERS.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Users>> findManyByRoleId(Collection<Integer> values) {
        return findManyByCondition(Users.USERS.ROLE_ID.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<UsersRecord,com.ns.vertx.pg.jooq.tables.pojos.Users,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<UsersRecord,com.ns.vertx.pg.jooq.tables.pojos.Users,Long>) super.queryExecutor();
    }
}
