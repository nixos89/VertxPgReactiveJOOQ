/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.daos;


import com.ns.vertx.pg.jooq.tables.Category;
import com.ns.vertx.pg.jooq.tables.records.CategoryRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryDao extends AbstractReactiveVertxDAO<CategoryRecord, com.ns.vertx.pg.jooq.tables.pojos.Category, Long, Future<List<com.ns.vertx.pg.jooq.tables.pojos.Category>>, Future<com.ns.vertx.pg.jooq.tables.pojos.Category>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<CategoryRecord,com.ns.vertx.pg.jooq.tables.pojos.Category,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public CategoryDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Category.CATEGORY, com.ns.vertx.pg.jooq.tables.pojos.Category.class, new ReactiveClassicQueryExecutor<CategoryRecord,com.ns.vertx.pg.jooq.tables.pojos.Category,Long>(configuration,delegate,com.ns.vertx.pg.jooq.tables.mappers.RowMappers.getCategoryMapper()));
    }

    @Override
    protected Long getId(com.ns.vertx.pg.jooq.tables.pojos.Category object) {
        return object.getCategoryId();
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Category>> findManyByName(Collection<String> values) {
        return findManyByCondition(Category.CATEGORY.NAME.in(values));
    }

    /**
     * Find records that have <code>is_deleted IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Category>> findManyByIsDeleted(Collection<Boolean> values) {
        return findManyByCondition(Category.CATEGORY.IS_DELETED.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<CategoryRecord,com.ns.vertx.pg.jooq.tables.pojos.Category,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<CategoryRecord,com.ns.vertx.pg.jooq.tables.pojos.Category,Long>) super.queryExecutor();
    }
}
