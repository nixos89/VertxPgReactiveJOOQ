/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables;


import com.ns.vertx.pg.jooq.Keys;
import com.ns.vertx.pg.jooq.Public;
import com.ns.vertx.pg.jooq.tables.records.CategoryBookRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryBook extends TableImpl<CategoryBookRecord> {

    private static final long serialVersionUID = 11913730;

    /**
     * The reference instance of <code>public.category_book</code>
     */
    public static final CategoryBook CATEGORY_BOOK = new CategoryBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryBookRecord> getRecordType() {
        return CategoryBookRecord.class;
    }

    /**
     * The column <code>public.category_book.category_id</code>.
     */
    public final TableField<CategoryBookRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.category_book.book_id</code>.
     */
    public final TableField<CategoryBookRecord, Long> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.category_book</code> table reference
     */
    public CategoryBook() {
        this(DSL.name("category_book"), null);
    }

    /**
     * Create an aliased <code>public.category_book</code> table reference
     */
    public CategoryBook(String alias) {
        this(DSL.name(alias), CATEGORY_BOOK);
    }

    /**
     * Create an aliased <code>public.category_book</code> table reference
     */
    public CategoryBook(Name alias) {
        this(alias, CATEGORY_BOOK);
    }

    private CategoryBook(Name alias, Table<CategoryBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryBook(Name alias, Table<CategoryBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CategoryBook(Table<O> child, ForeignKey<O, CategoryBookRecord> key) {
        super(child, key, CATEGORY_BOOK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CategoryBookRecord> getPrimaryKey() {
        return Keys.CATEGORY_BOOK_PKEY;
    }

    @Override
    public List<UniqueKey<CategoryBookRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoryBookRecord>>asList(Keys.CATEGORY_BOOK_PKEY);
    }

    @Override
    public List<ForeignKey<CategoryBookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CategoryBookRecord, ?>>asList(Keys.CATEGORY_BOOK__CATEGORY_BOOK_CATEGORY_ID_FKEY, Keys.CATEGORY_BOOK__CATEGORY_BOOK_BOOK_ID_FKEY);
    }

    public Category category() {
        return new Category(this, Keys.CATEGORY_BOOK__CATEGORY_BOOK_CATEGORY_ID_FKEY);
    }

    public Book book() {
        return new Book(this, Keys.CATEGORY_BOOK__CATEGORY_BOOK_BOOK_ID_FKEY);
    }

    @Override
    public CategoryBook as(String alias) {
        return new CategoryBook(DSL.name(alias), this);
    }

    @Override
    public CategoryBook as(Name alias) {
        return new CategoryBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryBook rename(String name) {
        return new CategoryBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryBook rename(Name name) {
        return new CategoryBook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
