/*
 * This file is generated by jOOQ.
 */
package com.ns.vertx.pg.jooq.tables.daos;


import com.ns.vertx.pg.jooq.tables.Author;
import com.ns.vertx.pg.jooq.tables.records.AuthorRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorDao extends AbstractReactiveVertxDAO<AuthorRecord, com.ns.vertx.pg.jooq.tables.pojos.Author, Long, Future<List<com.ns.vertx.pg.jooq.tables.pojos.Author>>, Future<com.ns.vertx.pg.jooq.tables.pojos.Author>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<AuthorRecord,com.ns.vertx.pg.jooq.tables.pojos.Author,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public AuthorDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Author.AUTHOR, com.ns.vertx.pg.jooq.tables.pojos.Author.class, new ReactiveClassicQueryExecutor<AuthorRecord,com.ns.vertx.pg.jooq.tables.pojos.Author,Long>(configuration,delegate,com.ns.vertx.pg.jooq.tables.mappers.RowMappers.getAuthorMapper()));
    }

    @Override
    protected Long getId(com.ns.vertx.pg.jooq.tables.pojos.Author object) {
        return object.getAuthorId();
    }

    /**
     * Find records that have <code>first_name IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Author>> findManyByFirstName(Collection<String> values) {
        return findManyByCondition(Author.AUTHOR.FIRST_NAME.in(values));
    }

    /**
     * Find records that have <code>last_name IN (values)</code> asynchronously
     */
    public Future<List<com.ns.vertx.pg.jooq.tables.pojos.Author>> findManyByLastName(Collection<String> values) {
        return findManyByCondition(Author.AUTHOR.LAST_NAME.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<AuthorRecord,com.ns.vertx.pg.jooq.tables.pojos.Author,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<AuthorRecord,com.ns.vertx.pg.jooq.tables.pojos.Author,Long>) super.queryExecutor();
    }
}
